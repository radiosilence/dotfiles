#!/bin/bash
set -eu

# Check if required tools are available
if ! command -v metaflac > /dev/null 2>&1; then
  echo "‚ùå metaflac not found (brew install flac)"
  exit 1
fi

if ! command -v exiftool > /dev/null 2>&1; then
  echo "‚ùå exiftool not found (brew install exiftool)"
  exit 1
fi

# Check if file argument is provided
if [ $# -eq 0 ]; then
  echo "Usage: $0 <flac_file>"
  echo "Checks if embedded artwork has been stripped of sensitive EXIF data"
  exit 1
fi

flac_file="$1"

# Check if file exists and is a FLAC file
if [ ! -f "$flac_file" ]; then
  echo "‚ùå File not found: $(basename "$flac_file")"
  exit 1
fi

if [[ ! "$flac_file" =~ \.(flac|FLAC)$ ]]; then
  echo "‚ùå Not a FLAC file: $(basename "$flac_file")"
  exit 1
fi

# Create temporary directory for extracted images
temp_dir=$(mktemp -d)
cleanup() {
  rm -rf "$temp_dir"
}
trap cleanup EXIT

# Function to get picture type description
get_picture_type_desc() {
  case "$1" in
    0) echo "Other" ;;
    1) echo "32x32 pixels file icon" ;;
    2) echo "Other file icon" ;;
    3) echo "Cover (front)" ;;
    4) echo "Cover (back)" ;;
    5) echo "Leaflet page" ;;
    6) echo "Media (e.g. label side of CD)" ;;
    7) echo "Lead artist/lead performer/soloist" ;;
    8) echo "Artist/performer" ;;
    9) echo "Conductor" ;;
    10) echo "Band/Orchestra" ;;
    11) echo "Composer" ;;
    12) echo "Lyricist/text writer" ;;
    13) echo "Recording Location" ;;
    14) echo "During recording" ;;
    15) echo "During performance" ;;
    16) echo "Movie/video screen capture" ;;
    17) echo "A bright coloured fish" ;;
    18) echo "Illustration" ;;
    19) echo "Band/artist logotype" ;;
    20) echo "Publisher/Studio logotype" ;;
    *) echo "Unknown ($1)" ;;
  esac
}

# Function to check if EXIF data contains sensitive information
has_sensitive_data() {
  local exif_json="$1"

  # Check for GPS data, camera serial numbers, and other PII
  if echo "$exif_json" | jq -e '.GPS? or .CameraSerialNumber? or .LensSerialNumber? or .BodySerialNumber? or .InternalSerialNumber? or .UniqueImageID? or .Artist? or .Copyright? or .Creator? or .Contact? or .Credit? or .Source? or .Comment? or .UserComment?' > /dev/null 2>&1; then
    return 0  # has sensitive data
  else
    return 1  # clean
  fi
}

# Get list of embedded pictures
picture_info=$(metaflac --list --block-type=PICTURE "$flac_file" 2>/dev/null)

if [ -z "$picture_info" ]; then
  echo "üìÅ $(basename "$flac_file"): No embedded artwork"
  exit 0
fi

echo "üìÅ $(basename "$flac_file"):"
picture_index=0

# Parse metaflac output to extract pictures
while IFS= read -r line; do
  if [[ "$line" =~ ^[[:space:]]*type:[[:space:]]*([0-9]+) ]]; then
    picture_type="${BASH_REMATCH[1]}"
    picture_desc=$(get_picture_type_desc "$picture_type")

    # Extract this picture to temporary file
    temp_image="$temp_dir/picture_${picture_index}.jpg"

    if metaflac --export-picture-to="$temp_image" "$flac_file" 2>/dev/null; then
      # Get EXIF data as JSON
      exif_data=$(exiftool -json -q "$temp_image" 2>/dev/null)

      if [ $? -eq 0 ] && [ -n "$exif_data" ]; then
        if has_sensitive_data "$exif_data"; then
          echo "   ‚ö†Ô∏è  $picture_desc - Contains sensitive EXIF data"
        else
          echo "   ‚úÖ $picture_desc - Clean"
        fi
      else
        echo "   ‚úÖ $picture_desc - Clean (no EXIF data)"
      fi
    else
      echo "   ‚ùå $picture_desc - Failed to extract"
    fi

    picture_index=$((picture_index + 1))
  fi
done <<< "$picture_info"
