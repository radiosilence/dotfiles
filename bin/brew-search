#!/usr/bin/env bash

set -euo pipefail

# Colors
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
RED=$'\033[0;31m'
GRAY=$'\033[0;90m'
NC=$'\033[0m'

# Icons
BEER="🍺"
CASK="🍷"
CHECK="✅"
PLUS="➕"

# Paths
BREWFILE="$HOME/Brewfile"
CACHE_DIR="$HOME/.cache/brew-quick"
CACHE_FILE="$CACHE_DIR/packages.txt"

# Ensure cache dir exists
mkdir -p "$CACHE_DIR"

# Function to update cache
update_cache() {
    echo "${BLUE}Updating package cache...${NC}"
    
    # Get API cache location
    API_DIR="$(brew --cache)/api"
    
    # Clear old cache
    > "$CACHE_FILE"
    
    # Get existing packages from Brewfile
    existing_brew=""
    existing_cask=""
    if [[ -f "$BREWFILE" ]]; then
        existing_brew=$(grep '^brew "' "$BREWFILE" | sed 's/^brew "\([^"]*\)".*/\1/' | paste -sd '|' -)
        existing_cask=$(grep '^cask "' "$BREWFILE" | sed 's/^cask "\([^"]*\)".*/\1/' | paste -sd '|' -)
    fi
    
    # Parse formulae
    if [[ -f "$API_DIR/formula.jws.json" ]]; then
        jq -r '.payload | fromjson | .[] | "\(.name)##\(.desc // "")##formula##\(.tap // "homebrew/core")"' "$API_DIR/formula.jws.json" 2>/dev/null | \
        while IFS='##' read -r name desc type tap; do
            if [[ -n "$existing_brew" ]] && echo "|$existing_brew|" | grep -q "|$name|"; then
                echo "$CHECK##$name##${desc:0:60}##$type##$tap"
            else
                echo "$BEER##$name##${desc:0:60}##$type##$tap"
            fi
        done >> "$CACHE_FILE"
    fi
    
    # Parse casks
    if [[ -f "$API_DIR/cask.jws.json" ]]; then
        jq -r '.payload | fromjson | .[] | "\(.token)##\(.desc // .name[0] // "")##cask##\(.tap // "homebrew/cask")"' "$API_DIR/cask.jws.json" 2>/dev/null | \
        while IFS='##' read -r name desc type tap; do
            if [[ -n "$existing_cask" ]] && echo "|$existing_cask|" | grep -q "|$name|"; then
                echo "$CHECK##$name##${desc:0:60}##$type##$tap"
            else
                echo "$CASK##$name##${desc:0:60}##$type##$tap"
            fi
        done >> "$CACHE_FILE"
    fi
    
    echo "${GREEN}Cache updated with $(wc -l < "$CACHE_FILE") packages${NC}"
}

# Check if cache is older than 24 hours
if [[ ! -f "$CACHE_FILE" ]] || [[ $(find "$CACHE_FILE" -mtime +1 -print 2>/dev/null) ]]; then
    update_cache
fi

# Display packages for selection
echo "${BLUE}🔍 Search packages (TAB to select, ENTER to confirm)${NC}"

# Format for display and select with fzf
selected=$(awk -F'##' '{printf "%-2s %-30s %s\n", $1, $2, $3}' "$CACHE_FILE" | \
    fzf --multi \
        --height=80% \
        --layout=reverse \
        --header="TAB=select, ENTER=install, ESC=cancel" \
        --ansi)

[[ -z "$selected" ]] && exit 0

# Process selections
declare -a new_formulae=()
declare -a new_casks=()
declare -a new_taps=()
declare -a skipped=()

while IFS= read -r line; do
    # Skip empty lines
    [[ -z "$line" ]] && continue
    
    # Extract icon and name (handle multiple spaces)
    icon=$(echo "$line" | awk '{print $1}')
    name=$(echo "$line" | awk '{print $2}')
    
    # Find full info from cache (use fixed string grep to handle special chars)
    info=$(grep -F "##${name}##" "$CACHE_FILE" | head -1)
    
    # If not found, skip this package
    if [[ -z "$info" ]]; then
        echo "${RED}Warning: Could not find info for package: $name${NC}" >&2
        continue
    fi
    
    # Parse the info
    IFS='##' read -r stored_icon stored_name stored_desc type tap <<< "$info"
    
    if [[ "$icon" == "$CHECK" ]]; then
        skipped+=("$name")
    elif [[ "$icon" == "$BEER" && "$type" == "formula" ]]; then
        new_formulae+=("$name")
        if [[ "$tap" != "homebrew/core" ]] && ! grep -q "^tap \"$tap\"" "$BREWFILE" 2>/dev/null; then
            new_taps+=("$tap")
        fi
    elif [[ "$icon" == "$CASK" && "$type" == "cask" ]]; then
        new_casks+=("$name")
        if [[ "$tap" != "homebrew/cask" ]] && ! grep -q "^tap \"$tap\"" "$BREWFILE" 2>/dev/null; then
            new_taps+=("$tap")
        fi
    fi
done <<< "$selected"

# Show summary
echo
echo "${BLUE}📋 Summary:${NC}"

if [[ ${#skipped[@]} -gt 0 ]]; then
    echo "${GRAY}Already installed: ${skipped[*]}${NC}"
fi

if [[ ${#new_formulae[@]} -eq 0 && ${#new_casks[@]} -eq 0 ]]; then
    echo "${YELLOW}Nothing new to install${NC}"
    exit 0
fi

[[ ${#new_formulae[@]} -gt 0 ]] && echo "${GREEN}Formulae: ${new_formulae[*]}${NC}"
[[ ${#new_casks[@]} -gt 0 ]] && echo "${GREEN}Casks: ${new_casks[*]}${NC}"
[[ ${#new_taps[@]} -gt 0 ]] && echo "${GREEN}New taps: ${new_taps[*]}${NC}"

# Confirm
echo
read -p "${YELLOW}Install these packages? [y/N] ${NC}" -n 1 -r
echo

[[ ! $REPLY =~ ^[Yy]$ ]] && exit 0

# Update Brewfile
echo "${BLUE}Updating Brewfile...${NC}"

# Add taps
for tap in "${new_taps[@]}"; do
    echo "tap \"$tap\"" >> "$BREWFILE"
done

# Add formulae
for pkg in "${new_formulae[@]}"; do
    echo "brew \"$pkg\"" >> "$BREWFILE"
done

# Add casks
for pkg in "${new_casks[@]}"; do
    echo "cask \"$pkg\"" >> "$BREWFILE"
done

# Run brew bundle
echo "${BLUE}Running brew bundle...${NC}"
cd "$HOME" && brew bundle

echo "${GREEN}✅ Done!${NC}"