#!/usr/bin/env bash

set -euo pipefail

# Colors
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
RED=$'\033[0;31m'
GRAY=$'\033[0;90m'
NC=$'\033[0m'

# Paths
BREWFILE="$HOME/Brewfile"
CACHE_DIR="$HOME/.cache/brew-search"
FORMULA_CACHE="$CACHE_DIR/formulae.txt"
CASK_CACHE="$CACHE_DIR/casks.txt"

# Create cache directory
mkdir -p "$CACHE_DIR"

# Function to build cache
build_cache() {
    echo "${BLUE}Building package cache...${NC}"
    
    local api_dir="$(brew --cache)/api"
    
    # Build formula cache
    if [[ -f "$api_dir/formula.jws.json" ]]; then
        jq -r '.payload | fromjson | .[] | select(.desc != null) | "\(.name)|\(.desc[:70])|\(.tap // "homebrew/core")"' \
            "$api_dir/formula.jws.json" > "$FORMULA_CACHE" 2>/dev/null || true
    fi
    
    # Build cask cache
    if [[ -f "$api_dir/cask.jws.json" ]]; then
        jq -r '.payload | fromjson | .[] | "\(.token)|\(.desc // .name[0] // "No description" | tostring[:70])|\(.tap // "homebrew/cask")"' \
            "$api_dir/cask.jws.json" > "$CASK_CACHE" 2>/dev/null || true
    fi
    
    echo "${GREEN}Cache built!${NC}"
}

# Check if cache needs update (older than 24 hours)
if [[ ! -f "$FORMULA_CACHE" ]] || [[ ! -f "$CASK_CACHE" ]] || \
   [[ $(find "$FORMULA_CACHE" -mtime +1 2>/dev/null) ]] || \
   [[ $(find "$CASK_CACHE" -mtime +1 2>/dev/null) ]]; then
    build_cache
fi

# Get existing packages from Brewfile
existing_formulae=""
existing_casks=""
if [[ -f "$BREWFILE" ]]; then
    existing_formulae=$(grep '^brew "' "$BREWFILE" | sed 's/^brew "\([^"]*\)".*/|\1|/' || true)
    existing_casks=$(grep '^cask "' "$BREWFILE" | sed 's/^cask "\([^"]*\)".*/|\1|/' || true)
fi

# Create display list
display_file=$(mktemp)
selection_map=$(mktemp)

# Add formulae to display
line_num=1
while IFS='|' read -r name desc tap; do
    if echo "$existing_formulae" | grep -qF "|$name|"; then
        echo "✅ $name - $desc" >> "$display_file"
        echo "$line_num:skip:formula:$name:$tap" >> "$selection_map"
    else
        echo "🍺 $name - $desc" >> "$display_file"
        echo "$line_num:new:formula:$name:$tap" >> "$selection_map"
    fi
    ((line_num++))
done < "$FORMULA_CACHE"

# Add casks to display
while IFS='|' read -r name desc tap; do
    if echo "$existing_casks" | grep -qF "|$name|"; then
        echo "✅ $name - $desc" >> "$display_file"
        echo "$line_num:skip:cask:$name:$tap" >> "$selection_map"
    else
        echo "🍷 $name - $desc" >> "$display_file"
        echo "$line_num:new:cask:$name:$tap" >> "$selection_map"
    fi
    ((line_num++))
done < "$CASK_CACHE"

# Show selection interface
echo "${BLUE}🔍 Search packages (TAB to select, ENTER to install)${NC}"
selected=$(cat "$display_file" | fzf --multi --height=80% --layout=reverse --ansi)

# Clean up temp files
rm -f "$display_file"

# Exit if nothing selected
[[ -z "$selected" ]] && { rm -f "$selection_map"; exit 0; }

# Process selections
new_formulae=()
new_casks=()
new_taps=()
skipped=()

while IFS= read -r line; do
    # Get line number from display
    line_text=$(echo "$line" | sed 's/^[^ ]* //')
    pkg_name=$(echo "$line_text" | cut -d' ' -f1)
    
    # Find matching entry in selection map
    while IFS=':' read -r num status type name tap; do
        if [[ "$name" == "$pkg_name" ]]; then
            if [[ "$status" == "skip" ]]; then
                skipped+=("$name")
            elif [[ "$status" == "new" ]]; then
                if [[ "$type" == "formula" ]]; then
                    new_formulae+=("$name")
                    if [[ "$tap" != "homebrew/core" ]] && ! grep -qF "tap \"$tap\"" "$BREWFILE" 2>/dev/null; then
                        new_taps+=("$tap")
                    fi
                else
                    new_casks+=("$name")
                    if [[ "$tap" != "homebrew/cask" ]] && ! grep -qF "tap \"$tap\"" "$BREWFILE" 2>/dev/null; then
                        new_taps+=("$tap")
                    fi
                fi
            fi
            break
        fi
    done < "$selection_map"
done <<< "$selected"

# Clean up
rm -f "$selection_map"

# Show summary
echo
echo "${BLUE}📋 Summary:${NC}"

[[ ${#skipped[@]} -gt 0 ]] && echo "${GRAY}Already installed: ${skipped[*]}${NC}"
[[ ${#new_taps[@]} -gt 0 ]] && echo "${GREEN}New taps: ${new_taps[*]}${NC}"
[[ ${#new_formulae[@]} -gt 0 ]] && echo "${GREEN}Formulae to install: ${new_formulae[*]}${NC}"
[[ ${#new_casks[@]} -gt 0 ]] && echo "${GREEN}Casks to install: ${new_casks[*]}${NC}"

if [[ ${#new_formulae[@]} -eq 0 && ${#new_casks[@]} -eq 0 ]]; then
    echo "${YELLOW}Nothing new to install!${NC}"
    exit 0
fi

# Confirm
echo
read -p "${YELLOW}Add to Brewfile and install? [y/N] ${NC}" -n 1 -r
echo

[[ ! $REPLY =~ ^[Yy]$ ]] && { echo "${RED}Cancelled${NC}"; exit 0; }

# Update Brewfile
echo "${BLUE}Updating Brewfile...${NC}"

# Add new taps
for tap in "${new_taps[@]}"; do
    echo "tap \"$tap\"" >> "$BREWFILE"
    echo "${GREEN}  + tap \"$tap\"${NC}"
done

# Add new formulae
for pkg in "${new_formulae[@]}"; do
    echo "brew \"$pkg\"" >> "$BREWFILE"
    echo "${GREEN}  + brew \"$pkg\"${NC}"
done

# Add new casks
for pkg in "${new_casks[@]}"; do
    echo "cask \"$pkg\"" >> "$BREWFILE"
    echo "${GREEN}  + cask \"$pkg\"${NC}"
done

# Run brew bundle
echo
echo "${BLUE}Running brew bundle...${NC}"
cd "$HOME" && brew bundle

echo
echo "${GREEN}✅ Done!${NC}"