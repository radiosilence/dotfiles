#!/usr/bin/env zsh
set -e

[ "$1" = "" ] && echo "Usage: $0 <Your Name>" && exit 1

DESCRIPTION="$1's IP allowed to access."
POLICY_NAME=allowed-ip-staging
DRY_RUN=0

update_rule() {
  echo "updating rule with priority $1 ($DESCRIPTION) with ip ranges $2"

  [ "$DRY_RUN" = "1" ] && exit 0

  gcloud compute security-policies rules update $1 \
    --security-policy $POLICY_NAME \
    --src-ip-ranges $2 \
    --description $DESCRIPTION \
    --action=allow
}

create_rule() {
  echo "creating rule with priority $1 ($DESCRIPTION) with ip ranges $2"

  [ "$DRY_RUN" = "1" ] && exit 0

  gcloud compute security-policies rules create $1 \
    --security-policy $POLICY_NAME \
    --src-ip-ranges $2 \
    --description $DESCRIPTION \
    --action=allow
}

ip=$(curl https://jsonip.com -s | jq -r .ip)
response=$(gcloud compute security-policies describe $POLICY_NAME)
rules=$(echo $response | yq '.rules')
existing_rule=$(echo $rules | yq 'filter(.description == "'$DESCRIPTION'") | .[0]')
id=$(echo $existing_rule | yq '.priority')

if [ "$id" = "null" ]; then
  id=$(echo $rules | yq 'sort_by(.priority * -1) | filter(.priority < 10000) | .[0].priority + 1')
  create_rule $id $ip
else
  ip_ranges=$(echo $existing_rule | yq .match.config.srcIpRanges)
  ip_exists=$(echo $ip_ranges | yq 'filter(. == "'$ip'") | length')

  if [ "$ip_exists" != "0" ]; then
    echo "skipping update of rule with priority $id ($DESCRIPTION) with additional ip $ip: already exists" && exit 1
  fi

  ip_ranges=$(echo $ip_ranges | yq '. += "'${ip}'"')
  update_rule $id $(echo $ip_ranges | yq 'join(",")')
fi
