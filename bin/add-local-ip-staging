#!/usr/bin/env bash
set -e

[ "$1" = "" ] && echo "Usage: $0 <Your Name>" && exit 1

DESCRIPTION="$1's IP allowed to access."
POLICY_NAME=allowed-ip-staging
DRY_RUN=1

# Usage: update_rule <priority> <ip_ranges>
update_rule() {
  echo "updating rule with priority $1 ($DESCRIPTION) with ip ranges $2"

  [ "$DRY_RUN" = "1" ] && exit 0

  gcloud compute security-policies rules update "$1" \
    --security-policy $POLICY_NAME \
    --src-ip-ranges "$2" \
    --description "$DESCRIPTION" \
    --action=allow
}

# Usage: create_rule <priority> <ip_ranges>
create_rule() {
  echo "creating rule with priority $1 ($DESCRIPTION) with ip ranges $2"

  [ "$DRY_RUN" = "1" ] && exit 0

  gcloud compute security-policies rules create "$1" \
    --security-policy $POLICY_NAME \
    --src-ip-ranges "$2" \
    --description "$DESCRIPTION" \
    --action=allow
}

# Usage: next_priority <rules>
next_priority() {
  echo "$1" | yq 'sort_by(.priority * -1) | filter(.priority < 10000) | .[0].priority + 1'
}

# Usage: ip_exists <ip_ranges> <ip>
ip_exists() {
  [ "$(echo "$1" | yq 'filter(. == "'"$2"'") | length')" != "0" ]
}

ip=$(curl https://jsonip.com -s | yq -r .ip)
policy=$(gcloud compute security-policies describe $POLICY_NAME)
rules=$(echo "$policy" | yq '.rules')
existing_rule=$(echo "$rules" | yq 'filter(.description == "'"$DESCRIPTION"'") | .[0]')
priority=$(echo "$existing_rule" | yq '.priority')

if [ "$priority" = "null" ]; then
  create_rule "$(next_priority "$rules")" "$ip"
else
  ip_ranges=$(echo "$existing_rule" | yq .match.config.srcIpRanges)
  if ip_exists "$ip_ranges" "$ip"; then
    echo "skipping update of rule with priority $priority ($DESCRIPTION): $ip already exists in ranges" && exit 1
  fi

  update_rule "$priority" "$(echo "$ip_ranges" | yq '. += "'"${ip}"'" | join(",")')"
fi
