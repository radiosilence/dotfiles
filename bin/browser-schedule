#!/bin/bash

# browser-schedule - Switch default browser based on work schedule
# Switches between work browser (Chrome) and personal browser (Zen) based on time

# Configuration - override with environment variables
WORK_BROWSER="${WORK_BROWSER:-chrome}"
PERSONAL_BROWSER="${PERSONAL_BROWSER:-zen}"
WORK_START_HOUR="${WORK_START_HOUR:-9}"
WORK_END_HOUR="${WORK_END_HOUR:-18}"
WORK_DAYS="${WORK_DAYS:-1-5}" # Monday-Friday

set_default_browser() {
  local browser="$1"
  
  # Set as default browser using defaultbrowser (silently)
  if defaultbrowser "$browser" >/dev/null 2>&1; then
    echo "✓ Set default browser to: $browser"
  else
    echo "✗ Failed to set default browser to: $browser" >&2
    echo "Available browsers:" >&2
    defaultbrowser >&2
    exit 1
  fi
}

is_work_time() {
  local current_hour current_dow
  current_hour=$(date +%H)
  current_dow=$(date +%u) # 1=Monday, 7=Sunday

  # Check if it's a work day
  if [[ "$WORK_DAYS" == "1-5" ]]; then
    # Monday-Friday
    [[ $current_dow -ge 1 && $current_dow -le 5 ]]
  else
    # Custom days (not implemented yet)
    [[ $current_dow -ge 1 && $current_dow -le 5 ]]
  fi || return 1

  # Check if it's work hours
  [[ $current_hour -ge $WORK_START_HOUR && $current_hour -lt $WORK_END_HOUR ]]
}


create_launchagent() {
  local script_path
  script_path="$(realpath "$0")"
  local agent_dir="$HOME/Library/LaunchAgents"
  local work_plist="$agent_dir/com.user.browser-schedule.work.plist"
  local personal_plist="$agent_dir/com.user.browser-schedule.personal.plist"
  local weekend_plist="$agent_dir/com.user.browser-schedule.weekend.plist"
  
  # Create LaunchAgents directory if it doesn't exist
  mkdir -p "$agent_dir"
  
  # Work browser switch
  cat > "$work_plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.user.browser-schedule.work</string>
  <key>ProgramArguments</key>
  <array>
    <string>$script_path</string>
    <string>--work</string>
  </array>
  <key>StartCalendarInterval</key>
  <array>
    <dict>
      <key>Weekday</key>
      <integer>1</integer>
      <key>Hour</key>
      <integer>$WORK_START_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>2</integer>
      <key>Hour</key>
      <integer>$WORK_START_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>3</integer>
      <key>Hour</key>
      <integer>$WORK_START_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>4</integer>
      <key>Hour</key>
      <integer>$WORK_START_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>5</integer>
      <key>Hour</key>
      <integer>$WORK_START_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
  </array>
  <key>RunAtLoad</key>
  <false/>
  <key>EnvironmentVariables</key>
  <dict>
    <key>PATH</key>
    <string>/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin</string>
  </dict>
  <key>StandardOutPath</key>
  <string>/tmp/browser-schedule-work.log</string>
  <key>StandardErrorPath</key>
  <string>/tmp/browser-schedule-work.log</string>
</dict>
</plist>
EOF

  # Personal browser switch (end of work day)
  cat > "$personal_plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.user.browser-schedule.personal</string>
  <key>ProgramArguments</key>
  <array>
    <string>$script_path</string>
    <string>--personal</string>
  </array>
  <key>StartCalendarInterval</key>
  <array>
    <dict>
      <key>Weekday</key>
      <integer>1</integer>
      <key>Hour</key>
      <integer>$WORK_END_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>2</integer>
      <key>Hour</key>
      <integer>$WORK_END_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>3</integer>
      <key>Hour</key>
      <integer>$WORK_END_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>4</integer>
      <key>Hour</key>
      <integer>$WORK_END_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
    <dict>
      <key>Weekday</key>
      <integer>5</integer>
      <key>Hour</key>
      <integer>$WORK_END_HOUR</integer>
      <key>Minute</key>
      <integer>0</integer>
    </dict>
  </array>
  <key>RunAtLoad</key>
  <false/>
  <key>EnvironmentVariables</key>
  <dict>
    <key>PATH</key>
    <string>/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin</string>
  </dict>
  <key>StandardOutPath</key>
  <string>/tmp/browser-schedule-personal.log</string>
  <key>StandardErrorPath</key>
  <string>/tmp/browser-schedule-personal.log</string>
</dict>
</plist>
EOF

  # Weekend switch
  cat > "$weekend_plist" << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>Label</key>
  <string>com.user.browser-schedule.weekend</string>
  <key>ProgramArguments</key>
  <array>
    <string>$script_path</string>
    <string>--personal</string>
  </array>
  <key>StartCalendarInterval</key>
  <dict>
    <key>Weekday</key>
    <integer>6</integer>
    <key>Hour</key>
    <integer>9</integer>
    <key>Minute</key>
    <integer>0</integer>
  </dict>
  <key>RunAtLoad</key>
  <false/>
  <key>EnvironmentVariables</key>
  <dict>
    <key>PATH</key>
    <string>/usr/local/bin:/opt/homebrew/bin:/usr/bin:/bin</string>
  </dict>
  <key>StandardOutPath</key>
  <string>/tmp/browser-schedule-weekend.log</string>
  <key>StandardErrorPath</key>
  <string>/tmp/browser-schedule-weekend.log</string>
</dict>
</plist>
EOF

  echo "✓ Created LaunchAgent plists"
}

setup_launchagent() {
  echo "Installing browser schedule LaunchAgent..."
  
  # Unload existing agents if they exist
  local labels=("com.user.browser-schedule.work" "com.user.browser-schedule.personal" "com.user.browser-schedule.weekend")
  for label in "${labels[@]}"; do
    launchctl unload ~/Library/LaunchAgents/${label}.plist 2>/dev/null || true
  done
  
  # Create new agents
  create_launchagent
  
  # Load the agents
  local agent_dir="$HOME/Library/LaunchAgents"
  if launchctl load "$agent_dir/com.user.browser-schedule.work.plist" && \
     launchctl load "$agent_dir/com.user.browser-schedule.personal.plist" && \
     launchctl load "$agent_dir/com.user.browser-schedule.weekend.plist"; then
    echo "✓ Browser schedule LaunchAgent installed"
    echo "Schedule:"
    echo "  Work browser ($WORK_BROWSER): ${WORK_START_HOUR}:00 weekdays"
    echo "  Personal browser ($PERSONAL_BROWSER): ${WORK_END_HOUR}:00 weekdays + 9:00 Saturday"
  else
    echo "✗ Failed to load LaunchAgent" >&2
    exit 1
  fi
}

uninstall_launchagent() {
  echo "Uninstalling browser schedule LaunchAgent..."
  
  # Unload and remove agents
  local labels=("com.user.browser-schedule.work" "com.user.browser-schedule.personal" "com.user.browser-schedule.weekend")
  local agent_dir="$HOME/Library/LaunchAgents"
  local removed_count=0
  
  for label in "${labels[@]}"; do
    local plist_file="$agent_dir/${label}.plist"
    if [[ -f "$plist_file" ]]; then
      launchctl unload "$plist_file" 2>/dev/null || true
      rm -f "$plist_file"
      ((removed_count++))
      echo "  ✓ Removed $label"
    fi
  done
  
  if [[ $removed_count -gt 0 ]]; then
    echo "✓ Browser schedule LaunchAgent uninstalled ($removed_count agents removed)"
  else
    echo "ℹ No browser schedule LaunchAgent found"
  fi
}

test_launchagent() {
  echo "Testing LaunchAgent setup..."
  
  local labels=("com.user.browser-schedule.work" "com.user.browser-schedule.personal" "com.user.browser-schedule.weekend")
  local agent_dir="$HOME/Library/LaunchAgents"
  
  for label in "${labels[@]}"; do
    local plist_file="$agent_dir/${label}.plist"
    if [[ -f "$plist_file" ]]; then
      echo "  ✓ $label.plist exists"
      if launchctl list | grep -q "$label"; then
        echo "    ✓ Agent is loaded"
        # Test by running the job manually
        echo "    Testing job execution..."
        if launchctl start "$label"; then
          echo "    ✓ Job started successfully"
        else
          echo "    ✗ Failed to start job"
        fi
      else
        echo "    ✗ Agent is not loaded"
      fi
    else
      echo "  ✗ $label.plist not found"
    fi
  done
  
  echo ""
  echo "To manually test a job:"
  echo "  launchctl start com.user.browser-schedule.work"
  echo "  launchctl start com.user.browser-schedule.personal"
}

show_status() {
  local current_browser
  current_browser=$(python3 -c "
import subprocess
import plistlib
import sys

try:
    # Get current default browser
    result = subprocess.run([
        'defaults', 'read', 
        'com.apple.LaunchServices/com.apple.launchservices.secure', 
        'LSHandlers'
    ], capture_output=True, text=True)
    
    # Parse and find HTML handler
    for line in result.stdout.split('\n'):
        if 'public.html' in line and 'LSHandlerRoleAll' in line:
            if 'com.google.Chrome' in line:
                print('Google Chrome')
            elif 'io.zen-lang.zen' in line:
                print('Zen Browser')
            elif 'com.apple.Safari' in line:
                print('Safari')
            elif 'org.mozilla.firefox' in line:
                print('Firefox')
            break
    else:
        print('Unknown')
except:
    print('Unknown')
" 2> /dev/null)

  echo "Current default browser: ${current_browser:-Unknown}"
  echo "Work browser: $WORK_BROWSER"
  echo "Personal browser: $PERSONAL_BROWSER"
  echo "Work hours: ${WORK_START_HOUR}:00-${WORK_END_HOUR}:00, days $WORK_DAYS"

  if is_work_time; then
    echo "Status: Work time - should be using $WORK_BROWSER"
  else
    echo "Status: Personal time - should be using $PERSONAL_BROWSER"
  fi
}

case "$1" in
  --work)
    set_default_browser "$WORK_BROWSER"
    ;;
  --personal)
    set_default_browser "$PERSONAL_BROWSER"
    ;;
  --auto)
    if is_work_time; then
      set_default_browser "$WORK_BROWSER"
    else
      set_default_browser "$PERSONAL_BROWSER"
    fi
    ;;
  --setup)
    setup_launchagent
    ;;
  --uninstall)
    uninstall_launchagent
    ;;
  --test)
    test_launchagent
    ;;
  --status)
    show_status
    ;;
  --help | -h)
    cat << EOF
browser-schedule - Schedule-based default browser switcher

Usage: $0 [OPTION]

Options:
  --work      Switch to work browser ($WORK_BROWSER)
  --personal  Switch to personal browser ($PERSONAL_BROWSER)
  --auto      Switch based on current time
  --setup     Install LaunchAgent schedule
  --uninstall Uninstall LaunchAgent schedule
  --test      Test LaunchAgent setup
  --status    Show current status
  --help      Show this help

Environment variables:
  WORK_BROWSER      Work browser name (default: chrome)
  PERSONAL_BROWSER  Personal browser name (default: zen)
  WORK_START_HOUR   Work start hour (default: 9)
  WORK_END_HOUR     Work end hour (default: 18)
  WORK_DAYS         Work days (default: 1-5 for Mon-Fri)

Examples:
  $0 --auto                    # Switch based on current time
  $0 --setup                   # Install LaunchAgent schedule
  $0 --test                    # Test LaunchAgent functionality
  WORK_START_HOUR=8 $0 --auto  # Use 8am start time
EOF
    ;;
  "")
    # Default action - auto switch
    if is_work_time; then
      set_default_browser "$WORK_BROWSER"
    else
      set_default_browser "$PERSONAL_BROWSER"
    fi
    ;;
  *)
    echo "Unknown option: $1" >&2
    echo "Use --help for usage information" >&2
    exit 1
    ;;
esac
