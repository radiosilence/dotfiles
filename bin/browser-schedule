#!/bin/bash

# browser-schedule - Smart browser proxy that routes URLs based on time
# Acts as default browser and delegates to work/personal browser based on schedule

# Configuration - override with environment variables
WORK_BROWSER="${WORK_BROWSER:-Google Chrome}"
PERSONAL_BROWSER="${PERSONAL_BROWSER:-Zen}"
WORK_START_HOUR="${WORK_START_HOUR:-9}"
WORK_END_HOUR="${WORK_END_HOUR:-18}"
WORK_DAYS="${WORK_DAYS:-1-5}" # Monday-Friday

is_work_time() {
  local current_hour current_dow
  current_hour=$(date +%H)
  current_dow=$(date +%u) # 1=Monday, 7=Sunday

  # Check if it's a work day
  local is_work_day=false
  if [[ "$WORK_DAYS" == "1-5" ]]; then
    # Monday-Friday
    [[ $current_dow -ge 1 && $current_dow -le 5 ]] && is_work_day=true
  else
    # Custom work days (comma-separated list like "1,2,3,7" for Mon,Tue,Wed,Sun)
    echo ",$WORK_DAYS," | grep -q ",$current_dow," && is_work_day=true
  fi

  [[ $is_work_day == true ]] || return 1

  # Check if it's work hours
  [[ $current_hour -ge $WORK_START_HOUR && $current_hour -lt $WORK_END_HOUR ]]
}

log_message() {
  echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" >> ~/browser-schedule.log
}

open_url() {
  local url="$1"
  local target_browser

  log_message "=== URL OPEN REQUEST ==="
  log_message "URL: $url"
  log_message "All args: $*"
  log_message "Script called as: $0"
  log_message "PWD: $(pwd)"

  # Determine which browser to use based on time
  if is_work_time; then
    target_browser="$WORK_BROWSER"
    log_message "Time check: WORK TIME"
  else
    target_browser="$PERSONAL_BROWSER"
    log_message "Time check: PERSONAL TIME"
  fi

  log_message "Target browser: $target_browser"
  log_message "Opening URL..."

  if open -a "$target_browser" "$url"; then
    log_message "✓ Successfully opened $url in $target_browser"
  else
    log_message "✗ Failed to open $url in $target_browser"
  fi

  log_message "=== END REQUEST ==="
  log_message ""
}

create_browser_app() {
  local app_dir="/Applications/BrowserSchedule.app"
  local contents_dir="$app_dir/Contents"
  local macos_dir="$contents_dir/MacOS"
  local script_path
  script_path="$(realpath "$0")"

  echo "Creating BrowserSchedule.app..."

  # Create app bundle structure
  sudo mkdir -p "$macos_dir"

  # Create Info.plist
  sudo tee "$contents_dir/Info.plist" > /dev/null << EOF
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
  <key>CFBundleExecutable</key>
  <string>browser-schedule</string>
  <key>CFBundleIdentifier</key>
  <string>com.user.browser-schedule</string>
  <key>CFBundleName</key>
  <string>BrowserSchedule</string>
  <key>CFBundleVersion</key>
  <string>1.0</string>
  <key>CFBundlePackageType</key>
  <string>APPL</string>
  <key>CFBundleURLTypes</key>
  <array>
    <dict>
      <key>CFBundleURLName</key>
      <string>HTTP URL</string>
      <key>CFBundleURLSchemes</key>
      <array>
        <string>http</string>
        <string>https</string>
      </array>
      <key>CFBundleTypeRole</key>
      <string>Viewer</string>
    </dict>
  </array>
  <key>LSMinimumSystemVersion</key>
  <string>10.15</string>
</dict>
</plist>
EOF

  # Create AppleScript wrapper that handles URL events
  sudo tee "$macos_dir/browser-schedule" > /dev/null << EOF
#!/usr/bin/osascript
# AppleScript URL handler for BrowserSchedule app

on run
    do shell script "echo '[\\$(date '+%Y-%m-%d %H:%M:%S')] AppleScript run handler called' >> ~/browser-schedule.log"
end run

on open location this_URL
    do shell script "echo '[\\$(date '+%Y-%m-%d %H:%M:%S')] URL received: ' & this_URL >> ~/browser-schedule.log"
    do shell script "'$script_path' --url '" & this_URL & "'"
end open location
EOF

  sudo chmod +x "$macos_dir/browser-schedule"
  echo "✓ Created BrowserSchedule.app"

  # Register the app with the system
  echo "Registering with system..."
  /System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -f "$app_dir"

  # Try to set as default browser
  echo "Setting BrowserSchedule as default browser..."
  if defaultbrowser browser-schedule; then
    echo "✓ Set BrowserSchedule as default browser"
  else
    echo "✗ Failed to set BrowserSchedule as default browser"
    echo "Available browsers:"
    defaultbrowser
  fi
}

show_status() {
  echo "Browser Schedule Status:"
  echo "  Work browser: $WORK_BROWSER"
  echo "  Personal browser: $PERSONAL_BROWSER"
  echo "  Work hours: ${WORK_START_HOUR}:00-${WORK_END_HOUR}:00, Monday-Friday"

  if is_work_time; then
    echo "  Current: Work time - using $WORK_BROWSER"
  else
    echo "  Current: Personal time - using $PERSONAL_BROWSER"
  fi

  if [[ -d "/Applications/BrowserSchedule.app" ]]; then
    echo "  App: ✓ BrowserSchedule.app installed"
  else
    echo "  App: ✗ BrowserSchedule.app not found (run --setup)"
  fi
}

# Handle URL arguments (when called as browser)
log_message "Script started with args: $*"
log_message "Number of args: $#"

for arg in "$@"; do
  log_message "Processing arg: $arg"
  if [[ "$arg" =~ ^https?:// ]]; then
    log_message "Found URL argument: $arg"
    open_url "$arg"
    exit 0
  fi
done

log_message "No URL arguments found in: $*"

case "$1" in
  --url)
    log_message "--url flag called with: $2"
    open_url "$2"
    ;;
  --setup)
    create_browser_app
    ;;
  --update)
    echo "Updating BrowserSchedule app with current settings..."
    if [[ -d "/Applications/BrowserSchedule.app" ]]; then
      sudo rm -rf "/Applications/BrowserSchedule.app" > /dev/null 2>&1
    fi
    create_browser_app
    ;;
  --uninstall)
    if [[ -d "/Applications/BrowserSchedule.app" ]]; then
      sudo rm -rf "/Applications/BrowserSchedule.app"
      echo "✓ BrowserSchedule.app removed"
    else
      echo "ℹ BrowserSchedule.app not found"
    fi
    ;;
  --status)
    show_status
    ;;
  --help | -h)
    cat << EOF
browser-schedule - Smart browser proxy that routes URLs based on time

Usage: $0 [OPTION] [URL]

Options:
  --setup       Create BrowserSchedule app (set as default browser)
  --update      Update app with current environment settings
  --uninstall   Remove BrowserSchedule app
  --status      Show current configuration and status
  --help        Show this help

Environment variables:
  WORK_BROWSER      Work browser name (default: Google Chrome)
  PERSONAL_BROWSER  Personal browser name (default: Zen)
  WORK_START_HOUR   Work start hour (default: 9)
  WORK_END_HOUR     Work end hour (default: 18)

How it works:
1. Run --setup to create BrowserSchedule.app
2. Set BrowserSchedule as default browser in System Settings
3. All URLs automatically open in the right browser based on time

Examples:
  $0 --setup                    # Create and install browser app
  $0 --update                   # Update app with current settings
  $0 --status                   # Check current configuration
  $0 https://example.com        # Open URL in appropriate browser
  WORK_START_HOUR=8 $0 --update # Update with custom work hours
EOF
    ;;
  "")
    show_status
    ;;
  *)
    # Try to open as URL if it looks like one
    if [[ "$1" =~ ^https?:// ]]; then
      open_url "$1"
    else
      echo "Unknown option: $1" >&2
      echo "Use --help for usage information" >&2
      exit 1
    fi
    ;;
esac
