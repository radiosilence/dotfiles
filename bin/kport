#!/usr/bin/env bash

# Spinner animation function
spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep "$pid")" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "        \b\b\b\b\b\b\b\b"
}

# Function to get network processes on macOS
get_macos_processes() {
  lsof -i -P | awk 'NR>1 && /LISTEN/ {print $1 " | PID:" $2 " | Port:" $9 " | " $8}' | sort -u -t'|' -k2
}

# Function to get network processes on Linux
get_linux_processes() {
  ss -tulnp | awk 'NR>1 {split($5,a,":"); print $6 " | Port:" a[2] " | " $1 " | " $4}' | sort -u -t'|' -k2
}

# Detect the operating system and get network processes
get_network_processes() {
  if [[ "$OSTYPE" == "darwin"* ]]; then
    get_macos_processes
  elif [[ "$OSTYPE" == "linux-gnu"* ]]; then
    get_linux_processes
  else
    echo "Unsupported operating system"
    exit 1
  fi
}

# Main function
main() {
  # Run network process gathering in background with a spinner
  local output_file=$(mktemp)

  # Start spinner in background
  spinner $$ &
  local spinner_pid=$!

  # Gather network processes
  get_network_processes >"$output_file" 2>/dev/null

  # Kill the spinner
  kill $spinner_pid 2>/dev/null
  wait $spinner_pid 2>/dev/null

  # Read processes and use fzf
  selected=$(cat "$output_file" | fzf -m --header="Select processes to kill (Tab to multi-select)")

  # Clean up temporary file
  rm "$output_file"

  # Check if any processes were selected
  if [[ -z "$selected" ]]; then
    echo "No processes selected. Exiting."
    exit 0
  fi

  # Extract unique PIDs and kill them
  unique_pids=$(echo "$selected" | sed -n 's/.*PID:\([0-9]*\).*/\1/p' | sort -u)

  echo "$unique_pids" | while read -r pid; do
    if [[ -n "$pid" ]]; then
      echo "Killing process $pid"
      kill -9 "$pid"
    fi
  done
}

# Run the script
main
