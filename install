#!/bin/sh
cd "$(dirname "$0")" || exit
DOTFILES=~/.dotfiles

# Only pull if we're in a git repo and have network access
if [ -d "$DOTFILES/.git" ]; then
  printf "\033[36m🔄 Updating dotfiles...\033[0m\n"
  (cd "$DOTFILES" && git pull 2>/dev/null) || printf "\033[33m⚠️  Warning: Could not update dotfiles repository\033[0m\n"
fi

link_dotfile() {
  if [ "$1" = "." ] || [ "$1" = ".." ]; then
    return
  fi
  if [ -h "$HOME/$1" ]; then
    printf "\033[90m✓ skipping $1 (link)\033[0m\n"
    return
  fi
  if [ -f "$HOME/$1" ]; then
    printf "\033[90m✓ skipping $1 (file)\033[0m\n"
    return
  fi
  if [ -d "$HOME/$1" ]; then
    printf "\033[90m✓ skipping $1 (dir)\033[0m\n"
    return
  fi
  if [ ".config" = "$1" ]; then
    printf "\033[90m✓ skipping $1 (.config)\033[0m\n"
    return
  fi

  case "$1" in
    *.git | .gitignore | ".|.." | .vscode | .sonarlint) return ;;
  esac

  echo "$PWD/$1"

  printf "\033[32m🔗 linking $PWD/$1 -> $HOME/$1\033[0m\n"
  ln -s "$PWD/$1" "$HOME/$1"
}

link_confdir() {
  if [ ! -e "$HOME/.config" ]; then
    printf "\033[34m📁 creating ~/.config\033[0m\n"
    mkdir "$HOME/.config"
  fi
  
  # Check if it's already the correct symlink
  if [ -h "$HOME/.config/$1" ] && [ "$(readlink "$HOME/.config/$1")" = "$PWD/$1" ]; then
    printf "\033[90m✓ skipping ~/.config/$1 (correct link)\033[0m\n"
    return
  fi
  
  # Remove existing file/directory/wrong symlink
  if [ -e "$HOME/.config/$1" ] || [ -h "$HOME/.config/$1" ]; then
    printf "\033[31m🗑️  rm ~/.config/$1\033[0m\n"
    rm -rf "$HOME/.config/$1"
  fi
  
  printf "\033[32m🔗 linking $PWD/$1 --> ~/.config/$1\033[0m\n"
  ln -s "$PWD/$1" "$HOME/.config/$1"
}

install_dotfiles() {
  [ ! -e "$DOTFILES" ] && return
  printf "\n\033[1;36m🏠 Installing dotfiles from $DOTFILES...\033[0m\n"
  (
    cd "$DOTFILES" || exit
    for file in .*; do
      link_dotfile "$file"
    done
  )
}

install_confdirs() {
  (
    cd config || exit
    for confdir in *; do
      link_confdir "$confdir"
    done
  )
}

install_brewfile() {
  if [ -e /Library ] && [ ! -e "$HOME/Brewfile" ]; then
    printf "\033[32m🔗 linking Brewfile $DOTFILES/Brewfile -> ~/Brewfile\033[0m\n"
    ln -s "$DOTFILES/Brewfile" "$HOME/Brewfile"
  fi
}

install_gitconfig() {
  # Create ~/.gitconfig if it doesn't exist
  if [ ! -f ~/.gitconfig ]; then
    touch ~/.gitconfig
  fi
  
  if ! grep '.dotfiles' ~/.gitconfig > /dev/null 2>&1; then
    printf "\033[35m⚙️  Adding ~/.dotfiles/git.d/core.conf to ~/.gitconfig\033[0m\n"
    printf "\n[include]\npath = ~/.dotfiles/git.d/core.conf\n" >> ~/.gitconfig
  fi
}

install_sshconfig() {
  # Create ~/.ssh/config if it doesn't exist
  if [ ! -f ~/.ssh/config ]; then
    mkdir -p ~/.ssh
    touch ~/.ssh/config
    chmod 600 ~/.ssh/config
  fi

  if ! grep '.dotfiles' ~/.ssh/config > /dev/null 2>&1; then
    printf "\033[35m🔐 Adding ~/.dotfiles/ssh.d/*.conf to ~/.ssh/config\033[0m\n"
    printf "\nInclude ~/.dotfiles/ssh.d/*.conf\n" >> ~/.ssh/config
  fi
}

install_zim_modules() {
  if command -v zsh > /dev/null 2>&1; then
    printf "\033[36m🚀 Installing Zim modules...\033[0m\n"
    # Initialize zim if zimfw.zsh exists
    if [ -f ~/.zim/zimfw.zsh ]; then
      zsh -c 'source ~/.zim/zimfw.zsh init -q' \
        && printf "\033[32m✅ Zim modules installed successfully\033[0m\n" \
        || printf "\033[33m⚠️  Warning: Zim module installation failed\033[0m\n"
    else
      printf "\033[90m✓ Zim not yet initialized, will be installed on first zsh startup\033[0m\n"
    fi
  else
    printf "\033[90m✓ Zsh not found, skipping Zim installation\033[0m\n"
  fi
}

install_dotfiles
install_confdirs
install_brewfile
install_sshconfig
install_gitconfig
install_zim_modules

cd - > /dev/null || exit
