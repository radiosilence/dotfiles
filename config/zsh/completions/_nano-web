#compdef nano-web

autoload -U is-at-least

_nano-web() {
    typeset -A opt_args
    typeset -a _arguments_options
    local ret=1

    if is-at-least 5.2; then
        _arguments_options=(-s -S -C)
    else
        _arguments_options=(-s -C)
    fi

    local context curcontext="$curcontext" state line
    _arguments "${_arguments_options[@]}" : \
'--dir=[Directory to serve]:DIR:_files' \
'-p+[Port to listen on]:PORT:_default' \
'--port=[Port to listen on]:PORT:_default' \
'--config-prefix=[Environment variable prefix for config injection]:CONFIG_PREFIX:_default' \
'--log-level=[Log level (debug, info, warn, error)]:LOG_LEVEL:_default' \
'--log-format=[Log format (json, console)]:LOG_FORMAT:_default' \
'-d[Check/reload files if modified]' \
'--dev[Check/reload files if modified]' \
'--spa[Enable SPA mode (serve index.html for all routes)]' \
'--log-requests[Log HTTP requests]' \
'-h[Print help (see more with '\''--help'\'')]' \
'--help[Print help (see more with '\''--help'\'')]' \
'-V[Print version]' \
'--version[Print version]' \
":: :_nano-web_commands" \
"*::: :->nano-web" \
&& ret=0
    case $state in
    (nano-web)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:nano-web-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
'-p+[Port to listen on]:PORT:_default' \
'--port=[Port to listen on]:PORT:_default' \
'--config-prefix=[Environment variable prefix for config injection]:CONFIG_PREFIX:_default' \
'--log-level=[Log level (debug, info, warn, error)]:LOG_LEVEL:_default' \
'--log-format=[Log format (json, console)]:LOG_FORMAT:_default' \
'-d[Check/reload files if modified]' \
'--dev[Check/reload files if modified]' \
'--spa[Enable SPA mode (serve index.html for all routes)]' \
'--log-requests[Log HTTP requests]' \
'-h[Print help]' \
'--help[Print help]' \
'::directory -- Directory to serve:_files' \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
&& ret=0
;;
(completion)
_arguments "${_arguments_options[@]}" : \
'-h[Print help]' \
'--help[Print help]' \
':shell:(bash elvish fish powershell zsh)' \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
":: :_nano-web__help_commands" \
"*::: :->help" \
&& ret=0

    case $state in
    (help)
        words=($line[1] "${words[@]}")
        (( CURRENT += 1 ))
        curcontext="${curcontext%:*:*}:nano-web-help-command-$line[1]:"
        case $line[1] in
            (serve)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(version)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(completion)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
(help)
_arguments "${_arguments_options[@]}" : \
&& ret=0
;;
        esac
    ;;
esac
;;
        esac
    ;;
esac
}

(( $+functions[_nano-web_commands] )) ||
_nano-web_commands() {
    local commands; commands=(
'serve:Start the web server' \
'version:Show version information' \
'completion:Generate completion script' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'nano-web commands' commands "$@"
}
(( $+functions[_nano-web__completion_commands] )) ||
_nano-web__completion_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web completion commands' commands "$@"
}
(( $+functions[_nano-web__help_commands] )) ||
_nano-web__help_commands() {
    local commands; commands=(
'serve:Start the web server' \
'version:Show version information' \
'completion:Generate completion script' \
'help:Print this message or the help of the given subcommand(s)' \
    )
    _describe -t commands 'nano-web help commands' commands "$@"
}
(( $+functions[_nano-web__help__completion_commands] )) ||
_nano-web__help__completion_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web help completion commands' commands "$@"
}
(( $+functions[_nano-web__help__help_commands] )) ||
_nano-web__help__help_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web help help commands' commands "$@"
}
(( $+functions[_nano-web__help__serve_commands] )) ||
_nano-web__help__serve_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web help serve commands' commands "$@"
}
(( $+functions[_nano-web__help__version_commands] )) ||
_nano-web__help__version_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web help version commands' commands "$@"
}
(( $+functions[_nano-web__serve_commands] )) ||
_nano-web__serve_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web serve commands' commands "$@"
}
(( $+functions[_nano-web__version_commands] )) ||
_nano-web__version_commands() {
    local commands; commands=()
    _describe -t commands 'nano-web version commands' commands "$@"
}

if [ "$funcstack[1]" = "_nano-web" ]; then
    _nano-web "$@"
else
    compdef _nano-web nano-web
fi
