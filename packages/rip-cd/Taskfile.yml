version: "3"

vars:
  BINARY_NAME: rip-cd
  BUILD_DIR: ../../bin
  MAIN_PACKAGE: ./cmd

tasks:
  default:
    desc: Build and install rip-cd binary
    cmds:
      - task: build

  build:
    desc: Build rip-cd binary and install to ~/.dotfiles/bin
    sources:
      - "**/*.go"
      - go.mod
      - go.sum
    generates:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}}"
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -ldflags="-s -w" -o {{.BUILD_DIR}}/{{.BINARY_NAME}} {{.MAIN_PACKAGE}}
      - echo "Built {{.BINARY_NAME}} -> {{.BUILD_DIR}}/{{.BINARY_NAME}}"

  test:
    desc: Run all tests
    cmds:
      - go test -v ./...

  test-coverage:
    desc: Run tests with coverage
    cmds:
      - go test -v -coverprofile=coverage.out ./...
      - go tool cover -html=coverage.out -o coverage.html
      - echo "Coverage report -> coverage.html"

  clean:
    desc: Clean build artifacts
    cmds:
      - rm -f {{.BUILD_DIR}}/{{.BINARY_NAME}}
      - rm -f coverage.out coverage.html
      - echo "Cleaned build artifacts"

  deps:
    desc: Download and tidy dependencies
    cmds:
      - go mod download
      - go mod tidy

  fmt:
    desc: Format Go code
    cmds:
      - go fmt ./...

  lint:
    desc: Run golangci-lint
    cmds:
      - golangci-lint run ./...
    preconditions:
      - sh: command -v golangci-lint
        msg: "golangci-lint not installed. Install with: brew install golangci-lint"

  dev:
    desc: Build development version (with debug info)
    cmds:
      - mkdir -p {{.BUILD_DIR}}
      - go build -o {{.BUILD_DIR}}/{{.BINARY_NAME}}-dev {{.MAIN_PACKAGE}}
      - echo "Built development version -> {{.BUILD_DIR}}/{{.BINARY_NAME}}-dev"

  install:
    desc: Alias for build (builds directly to install location)
    cmds:
      - task: build

  run:
    desc: "Run rip-cd with arguments (use: task run -- --help)"
    cmds:
      - go run {{.MAIN_PACKAGE}} {{.CLI_ARGS}}

  version:
    desc: Show version information
    cmds:
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} version"
    preconditions:
      - sh: test -f {{.BUILD_DIR}}/{{.BINARY_NAME}}
        msg: "Binary not found. Run 'task build' first."

  demo:
    desc: Run a demo showing rip-cd functionality
    cmds:
      - echo "rip-cd Demo"
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} version"
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} generate template --workspace /tmp/rip-cd-demo"
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} generate schema --workspace /tmp/rip-cd-demo"
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} validate /tmp/rip-cd-demo/metadata/template.yaml --workspace /tmp/rip-cd-demo"
      - "{{.BUILD_DIR}}/{{.BINARY_NAME}} rip /tmp/rip-cd-demo/metadata/template.yaml --workspace /tmp/rip-cd-demo --dry-run"
      - echo "Demo completed! Check /tmp/rip-cd-demo for generated files"
    preconditions:
      - sh: test -f {{.BUILD_DIR}}/{{.BINARY_NAME}}
        msg: "Binary not found. Run 'task build' first."

  tag:
    desc: Create and push a git tag for release
    vars:
      TAG: '{{default "v2.0.0" .TAG}}'
    cmds:
      - git tag -a {{.TAG}} -m "Release {{.TAG}}"
      - git push origin {{.TAG}}
      - echo "Tagged and pushed {{.TAG}}"

  publish:
    desc: Publish Go module (requires clean git state)
    vars:
      VERSION: '{{default "v2.0.0" .VERSION}}'
    preconditions:
      - sh: git diff --quiet
        msg: "Git working directory must be clean"
      - sh: git diff --cached --quiet
        msg: "Git staging area must be clean"
    cmds:
      - task: test
      - task: build
      - git tag -a {{.VERSION}} -m "Release {{.VERSION}}"
      - git push origin {{.VERSION}}
      - echo "Published {{.VERSION}} to GitHub"
      - echo "Go module available at github.com/radiosilence/dotfiles/packages/rip-cd@{{.VERSION}}"

  release:
    desc: Full release process (test, build, tag, publish)
    vars:
      VERSION: '{{default "v2.0.0" .VERSION}}'
    cmds:
      - task: clean
      - task: deps
      - task: fmt
      - task: test
      - task: build
      - task: publish
        vars: { VERSION: "{{.VERSION}}" }
      - echo "Release {{.VERSION}} completed"
